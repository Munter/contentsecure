#!/usr/bin/env node

//var optimist = require('optimist');
var optimist = require('optimist'),
    commandLineOptions = optimist
        .usage('Output a content security policy for your web site. Takes either a web root of your site as option, or any number of html-files as arguments.')
        .options('h', {
            alias: 'help',
            describe: 'Show this help',
            type: 'boolean',
            default: false
        })
        .options('r', {
            alias: 'root',
            describe: 'Path to your web root. Omission will result in optimistic guessing',
            type: 'string',
            demand: false
        })
        .options('d', {
            alias: 'debug',
            describe: 'Debug. Sets report only mode on the resulting security policy to test the policy.',
            type: 'boolean',
            default: false
        })
        .options('report-uri', {
            describe: 'The report URI to send security violation reports to',
            type: 'string',
            demand: false
        })
        .wrap(72)
        .argv;

if (commandLineOptions.h || commandLineOptions._.length === 0) {
    optimist.showHelp();
    process.exit(1);
}

var urlTools = require('assetgraph/lib/util/urlTools'),
    rootUrl = commandLineOptions.root && urlTools.urlOrFsPathToUrl(commandLineOptions.root, true),
    inputUrls;

if (commandLineOptions._.length > 0) {
    inputUrls = commandLineOptions._.map(function (urlOrFsPath) {
        return urlTools.urlOrFsPathToUrl(urlOrFsPath, false);
    });
    if (!rootUrl) {
        rootUrl = urlTools.findCommonUrlPrefix(inputUrls.filter(function (inputUrl) {
            return (/^file:/).test(inputUrl);
        }));
    }
} else if (rootUrl && /^file:/.test(rootUrl)) {
    inputUrls = [rootUrl + '**/*.html'];
    console.warn('No input files specified, defaulting to ' + inputUrls[0]);
} else {
    throw new Error('No input files and no --root specified (or it isn\'t file:), cannot proceed');
}

if (!rootUrl && inputUrls.length === 1) {
    rootUrl = inputUrls[0];
}


var AssetGraph = require('assetgraph'),
    query = AssetGraph.query,
    csp = require('../lib/csp'),
    colors = require('colors'),
    followRelationsQueryObj = {
        to: {url: query.not(/^(?:https?:)\/\//)}
    };

AssetGraph.registerTransform(csp, 'csp');

new AssetGraph({root: rootUrl})
    .on('error', function (err) {
        console.error(' ✘ '.red + err.message);
    })
    .on('warn', function (asset) {
        if (asset.url) {
            console.warn(' ! '.yellow + asset.url);
        }
    })
    .on('addAsset', function (asset) {
        if (asset.url) {
            //console.warn(' ✔ '.green + asset.url);
        }
    })
    .registerRequireJsConfig()
    .loadAssets(inputUrls)
    .populate({followRelations: followRelationsQueryObj})
    .queue(function fixBaseAssetsOfUnresolvedOutgoingRelationsFromHtmlFragments(assetGraph) {
        assetGraph.findRelations({from: {type: 'Html', isFragment: true, isInitial: true}}, true).forEach(function (relation) {
            if (relation._baseAssetPath === null) {
                delete relation._baseAssetPath;
            }
        });
    })
    .populate({followRelations: followRelationsQueryObj, startAssets: {type: 'Html', isFragment: true, isInitial: true}})
    .convertCssImportsToHtmlStyles()
    .csp({
        'report-uri': commandLineOptions['report-uri'],
        'debug': commandLineOptions.debug
    })
    .run(function (err) {
        if (err) {
            throw err;
        }
    });
